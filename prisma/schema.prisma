generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cardProgress CardProgress[]
  flashcards   Flashcard[]
  notes        Note[]
  progress     UserProgress?
}

model Note {
  id         String      @id @default(cuid())
  title      String
  content    String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  flashcards Flashcard[]
  user       User        @relation(fields: [userId], references: [id])
}

model Flashcard {
  id        String   @id @default(cuid())
  front     String
  back      String
  noteId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note      Note     @relation(fields: [noteId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model StudyDeck {
  id           String         @id @default(cuid())
  userId       String
  title        String
  flashcards   Json
  mindMap      Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  error        String?
  isProcessing Boolean        @default(false)
  cardProgress CardProgress[]

  @@index([userId])
}

model CardProgress {
  id           String    @id @default(cuid())
  userId       String
  cardId       String
  deckId       String
  easeFactor   Float     @default(2.5)
  interval     Int       @default(0)
  repetitions  Int       @default(0)
  dueDate      DateTime  @default(now())
  lastReviewed DateTime?
  streak       Int       @default(0)
  totalPoints  Int       @default(0)
  responseTime Int?      // in milliseconds
  difficulty   String?   // "easy", "medium", "hard"
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deck         StudyDeck @relation(fields: [deckId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@unique([userId, cardId])
  @@index([userId, dueDate])
}

model UserProgress {
  id            String    @id @default(cuid())
  userId        String    @unique
  points        Int       @default(0)
  streak        Int       @default(0)
  lastStudyDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
}
