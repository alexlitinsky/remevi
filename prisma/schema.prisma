generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User's study materials
  studyMaterials StudyMaterial[]

  // User's collections of study content
  decks Deck[]

  // User's study progress
  progress    UserProgress?
  preferences UserPreferences?

  // User's interaction with content
  cardInteractions CardInteraction[]
  deckSessions     StudySession[]

  // Quiz related
  quizSessions QuizSession[]
  achievements UserAchievement[]

  // Analytics
  quizAnalytics  QuizAnalytics[]
  topicMastery   TopicMastery[]
  errorLogs      ErrorLog[]
  recoveryLogs   RecoveryLog[]
}

// User settings and preferences
model UserPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  newCardsPerDay      Int      @default(15)
  reviewsPerDay       Int      @default(20)
  defaultDifficulty   String   @default("medium") // "easy", "medium", "hard"
  notificationEnabled Boolean  @default(true)
  theme               String   @default("light")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User's overall progress
model UserProgress {
  id             String    @id @default(cuid())
  userId         String    @unique
  points         Int       @default(0)
  streak         Int       @default(0)
  totalStudyTime Int       @default(0) // in minutes
  lastStudyDate  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Original study materials
model StudyMaterial {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String?
  fileUrl         String?
  fileType        String? // "pdf", "doc", "txt", etc.
  content         String? // For plain text content
  status          String   @default("pending") // "pending", "processing", "completed", "error"
  processingError String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyContent StudyContent[]
  tags         Tag[]

  @@index([userId])
}

// Tag model for categorizing content
model Tag {
  id   String @id @default(cuid())
  name String

  // Relationships
  studyMaterials StudyMaterial[]
  decks          Deck[]
  studyContent   StudyContent[]

  @@unique([name])
}

// Study content - abstraction for different question types
model StudyContent {
  id              String   @id @default(cuid())
  studyMaterialId String
  type            String // "flashcard", "mcq", "frq", etc.
  difficultyLevel String   @default("medium") // "easy", "medium", "hard"
  shared          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Content based on type
  flashcardContent FlashcardContent?
  mcqContent       MCQContent?
  frqContent       FRQContent?

  // Relationships
  studyMaterial    StudyMaterial     @relation(fields: [studyMaterialId], references: [id], onDelete: Cascade)
  tags             Tag[]
  deckContent      DeckContent[]
  cardInteractions CardInteraction[]
  QuizAnswer       QuizAnswer[]

  @@index([studyMaterialId])
  @@index([type])
}

// Flashcard-specific content
model FlashcardContent {
  id             String @id @default(cuid())
  studyContentId String @unique
  front          String
  back           String

  studyContent StudyContent @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
}

// MCQ-specific content
model MCQContent {
  id                 String  @id @default(cuid())
  studyContentId     String  @unique
  question           String
  options            Json // Array of option objects
  correctOptionIndex Int
  explanation        String?

  studyContent StudyContent @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
}

// Rename Fill-in-blank-specific content to FRQ
model FRQContent {
  id             String  @id @default(cuid())
  studyContentId String  @unique
  question       String // Full question text
  answers        Json // Array of acceptable answers
  caseSensitive  Boolean @default(false)
  explanation    String?

  studyContent StudyContent @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
}

// Deck model - collection of study content
model Deck {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  category     String? // Added field for deck category
  isPublic     Boolean  @default(false)
  mindMap      Json?
  isProcessing Boolean  @default(false)
  error        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  deckContent   DeckContent[]
  tags          Tag[]
  studySessions StudySession[]
  QuizSession   QuizSession[]

  @@index([userId])
}

// Junction table for decks and study content
model DeckContent {
  id             String @id @default(cuid())
  deckId         String
  studyContentId String
  order          Int    @default(0)

  // Relationships
  deck         Deck         @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studyContent StudyContent @relation(fields: [studyContentId], references: [id], onDelete: Cascade)

  @@unique([deckId, studyContentId])
  @@index([deckId])
  @@index([studyContentId])
}

// User's interaction with study content
model CardInteraction {
  id             String  @id @default(cuid())
  userId         String
  studyContentId String
  sessionId      String?

  // SRS algorithm fields
  easeFactor   Float     @default(2.5)
  interval     Int       @default(0)
  repetitions  Int       @default(0)
  dueDate      DateTime  @default(now())
  lastReviewed DateTime?
  streak       Int       @default(0)

  // Performance metrics
  responseTime Int? // in milliseconds
  difficulty   String? // "easy", "medium", "hard"
  correct      Boolean? // For MCQ and fill-in-blank
  score        Int      @default(0)
  masteryLevel String   @default("new") // "mastered", "learning", "struggling", "new"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyContent StudyContent  @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
  studySession StudySession? @relation(fields: [sessionId], references: [id])

  @@unique([userId, studyContentId])
  @@index([userId, dueDate])
  @@index([sessionId])
}

// Study sessions
model StudySession {
  id                  String    @id @default(cuid())
  userId              String
  deckId              String
  startTime           DateTime  @default(now())
  endTime             DateTime?
  totalTime           Int? // in seconds
  cardsStudied        Int       @default(0)
  pointsEarned        Int       @default(0)
  averageResponseTime Int? // in milliseconds
  correctCount        Int       @default(0)
  incorrectCount      Int       @default(0)

  // Relationships
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck             Deck              @relation(fields: [deckId], references: [id], onDelete: Cascade)
  cardInteractions CardInteraction[]

  @@index([userId])
  @@index([deckId])
  @@index([startTime])
}

// Achievements system
model Achievement {
  id            String @id @default(cuid())
  name          String @unique
  description   String
  category      String // "study", "mastery", "streak", "quiz", etc.
  type          String // "milestone", "special", "secret", etc.
  requirements  Json // Conditions to unlock (e.g., {"pointsRequired": 1000})
  badgeIcon     String // Icon identifier or URL
  pointsAwarded Int    @default(0)

  // Relationships
  userAchievements UserAchievement[]

  @@index([category])
}

// Junction table for users and achievements
model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  notified      Boolean  @default(false)

  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

// Quiz Sessions
model QuizSession {
  id                String    @id @default(cuid())
  userId            String
  deckId            String
  startTime         DateTime  @default(now())
  endTime           DateTime?
  totalTime         Int? // in seconds
  questionsAnswered Int       @default(0)
  correctAnswers    Int       @default(0)
  incorrectAnswers  Int       @default(0)
  pointsEarned      Int       @default(0)
  quizType          String // "mcq", "frq", "mixed"

  // Relationships
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck        Deck         @relation(fields: [deckId], references: [id], onDelete: Cascade)
  quizAnswers QuizAnswer[]

  @@index([userId])
  @@index([deckId])
  @@index([startTime])
}

// Individual question responses in quiz
model QuizAnswer {
  id             String   @id @default(cuid())
  quizSessionId  String
  studyContentId String
  userAnswer     String // User's submitted answer
  isCorrect      Boolean
  timeTaken      Int? // in milliseconds
  pointsEarned   Int      @default(0)
  createdAt      DateTime @default(now())

  // Relationships
  quizSession  QuizSession  @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  studyContent StudyContent @relation(fields: [studyContentId], references: [id])

  @@index([quizSessionId])
  @@index([studyContentId])
}

// Analytics models
model QuizAnalytics {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  eventData Json
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
}

model TopicMastery {
  id                  String   @id @default(cuid())
  userId             String
  topic              String
  questionsAttempted Int      @default(0)
  questionsCorrect   Int      @default(0)
  averageResponseTime Float    @default(0)
  lastAttempted      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topic])
  @@index([userId])
  @@index([topic])
}

model ErrorLog {
  id           String   @id @default(cuid())
  userId       String
  errorType    String
  errorMessage String
  sessionId    String?
  timestamp    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([errorType])
  @@index([timestamp])
}

model RecoveryLog {
  id                String   @id @default(cuid())
  userId           String
  sessionId        String
  recoveryType     String
  questionsAnswered Int
  timestamp        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([timestamp])
}
