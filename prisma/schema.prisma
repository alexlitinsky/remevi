generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User management
model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // User's study materials
  studyMaterials     StudyMaterial[]
  
  // User's collections of study content
  decks              Deck[]
  
  // User's study progress
  progress           UserProgress?
  preferences        UserPreferences?
  
  // User's interaction with content
  cardInteractions   CardInteraction[]
  deckSessions       StudySession[]
}

// User settings and preferences
model UserPreferences {
  id                 String               @id @default(cuid())
  userId             String               @unique
  newCardsPerDay     Int                  @default(15)
  reviewsPerDay      Int                  @default(20)
  defaultDifficulty  String               @default("medium") // "easy", "medium", "hard"
  notificationEnabled Boolean             @default(true)
  theme              String               @default("light")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User's overall progress
model UserProgress {
  id                 String               @id @default(cuid())
  userId             String               @unique
  points             Int                  @default(0)
  streak             Int                  @default(0)
  totalStudyTime     Int                  @default(0) // in minutes
  lastStudyDate      DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Original study materials
model StudyMaterial {
  id                 String               @id @default(cuid())
  userId             String
  title              String
  description        String?
  fileUrl            String?
  fileType           String?              // "pdf", "doc", "txt", etc.
  content            String?              // For plain text content
  status             String               @default("pending") // "pending", "processing", "completed", "error"
  processingError    String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relationships
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyContent       StudyContent[]
  tags               Tag[]
  
  @@index([userId])
}

// Tag model for categorizing content
model Tag {
  id                 String               @id @default(cuid())
  name               String
  
  // Relationships
  studyMaterials     StudyMaterial[]
  decks              Deck[]
  studyContent       StudyContent[]
  
  @@unique([name])
}

// Study content - abstraction for different question types
model StudyContent {
  id                 String               @id @default(cuid())
  studyMaterialId    String
  type               String               // "flashcard", "mcq", "fill-in-blank", etc.
  difficultyLevel    String               @default("medium") // "easy", "medium", "hard"
  shared             Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Content based on type
  flashcardContent   FlashcardContent?
  mcqContent         MCQContent?
  fillInBlankContent FillInBlankContent?
  
  // Relationships
  studyMaterial      StudyMaterial        @relation(fields: [studyMaterialId], references: [id], onDelete: Cascade)
  tags               Tag[]
  deckContent        DeckContent[]
  cardInteractions   CardInteraction[]
  
  @@index([studyMaterialId])
  @@index([type])
}

// Flashcard-specific content
model FlashcardContent {
  id                 String               @id @default(cuid())
  studyContentId     String               @unique
  front              String
  back               String
  
  studyContent       StudyContent         @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
}

// MCQ-specific content
model MCQContent {
  id                 String               @id @default(cuid())
  studyContentId     String               @unique
  question           String
  options            Json                 // Array of option objects
  correctOptionIndex Int
  explanation        String?
  
  studyContent       StudyContent         @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
}

// Fill-in-blank-specific content
model FillInBlankContent {
  id                 String               @id @default(cuid())
  studyContentId     String               @unique
  text               String               // Text with blanks marked (e.g., "The capital of France is [Paris]")
  answers            Json                 // Array of correct answers for each blank
  caseSensitive      Boolean              @default(false)
  explanation        String?
  
  studyContent       StudyContent         @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
}

// Deck model - collection of study content
model Deck {
  id                 String               @id @default(cuid())
  userId             String
  title              String
  description        String?
  isPublic           Boolean              @default(false)
  mindMap            Json?
  isProcessing       Boolean              @default(false)
  error              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relationships
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  deckContent        DeckContent[]
  tags               Tag[]
  studySessions      StudySession[]
  
  @@index([userId])
}

// Junction table for decks and study content
model DeckContent {
  id                 String               @id @default(cuid())
  deckId             String
  studyContentId     String
  order              Int                  @default(0)
  
  // Relationships
  deck               Deck                 @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studyContent       StudyContent         @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
  
  @@unique([deckId, studyContentId])
  @@index([deckId])
  @@index([studyContentId])
}

// User's interaction with study content
model CardInteraction {
  id                 String               @id @default(cuid())
  userId             String
  studyContentId     String
  sessionId          String?
  
  // SRS algorithm fields
  easeFactor         Float                @default(2.5)
  interval           Int                  @default(0)
  repetitions        Int                  @default(0)
  dueDate            DateTime             @default(now())
  lastReviewed       DateTime?
  streak             Int                  @default(0)
  
  // Performance metrics
  responseTime       Int?                 // in milliseconds
  difficulty         String?              // "easy", "medium", "hard"
  correct            Boolean?             // For MCQ and fill-in-blank
  score              Int                  @default(0)
  
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relationships
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyContent       StudyContent         @relation(fields: [studyContentId], references: [id], onDelete: Cascade)
  studySession       StudySession?        @relation(fields: [sessionId], references: [id])
  
  @@unique([userId, studyContentId])
  @@index([userId, dueDate])
  @@index([sessionId])
}

// Study sessions
model StudySession {
  id                 String               @id @default(cuid())
  userId             String
  deckId             String
  startTime          DateTime             @default(now())
  endTime            DateTime?
  totalTime          Int?                 // in seconds
  cardsStudied       Int                  @default(0)
  pointsEarned       Int                  @default(0)
  
  // Relationships
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck               Deck                 @relation(fields: [deckId], references: [id], onDelete: Cascade)
  cardInteractions   CardInteraction[]
  
  @@index([userId])
  @@index([deckId])
}
